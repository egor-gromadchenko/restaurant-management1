package ua.opnu.restaurantmanagement1.service;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;
import ua.opnu.restaurantmanagement1.entity.User;

import java.security.Key;
import java.util.Date;

@Service
public class JwtService {

    private static final long EXPIRATION = 1000 * 60 * 60; // 1 –≥–æ–¥–∏–Ω–∞
    private static final String SECRET = "MYSECRETKEYSECRETKEYSECRETKEYSECRETKEY123!";
    private final Key key = Keys.hmacShaKeyFor(SECRET.getBytes());

    // üîê –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–æ–∫–µ–Ω–∞ –∑ —Ä–æ–ª–ª—é
    public String generateToken(User user) {
        return Jwts.builder()
                .setSubject(user.getUsername())
                .claim("role", user.getRole().name()) // –¥–æ–¥–∞—î–º–æ —Ä–æ–ª—å
                .setIssuedAt(new Date())
                .setExpiration(new Date(System.currentTimeMillis() + EXPIRATION))
                .signWith(key, SignatureAlgorithm.HS256)
                .compact();
    }

    // üìå –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–æ–∫–µ–Ω–∞
    public String getUsernameFromToken(String token) {
        return Jwts.parserBuilder()
                .setSigningKey(key)
                .build()
                .parseClaimsJws(token)
                .getBody()
                .getSubject();
    }

    // üìå –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–æ–∫–µ–Ω–∞
    public String getRoleFromToken(String token) {
        return (String) Jwts.parserBuilder()
                .setSigningKey(key)
                .build()
                .parseClaimsJws(token)
                .getBody()
                .get("role");
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—ñ–π—Å–Ω–æ—Å—Ç—ñ —Ç–æ–∫–µ–Ω–∞
    public boolean isTokenValid(String token, UserDetails userDetails) {
        final String username = getUsernameFromToken(token);
        return username.equals(userDetails.getUsername());
    }
}
